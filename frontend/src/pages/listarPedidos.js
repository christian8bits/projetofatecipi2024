import Head from 'next/head'
import { useEffect, useState } from 'react'
import axios from 'axios'
import Link from 'next/link'
import { servDelete } from '@/services/servDelete'
const XLSX = require('xlsx')


export default function Home() {
  const [data, setData] = useState([])
  const [pagina, setPage] = useState('')
  const [ultimaPagina, setLastPage] = useState('')
  const [message, setMessage] = useState('')
  const [pesquisa, setPesquisa] = useState('')
  const xlsx = require('xlsx')



  const getPedidos = async (pagina) => {
    console.log('get pedidos')
    console.log(pagina)
    if (pagina === undefined) {
      pagina = 1
    }
    setPage(pagina)
    console.log(pagina)
    await axios.get("http://localhost:8080/pedidos?pagina=" + pagina)
      .then((response) => {
        console.log(response.data.pedidos)
        setData(response.data.pedidos)
        setLastPage(response.data.paginacao.ultimaPagina)
      }).catch((err) => {
        if (err.response) {
          setMessage(err.response.data.mensagem)
        } else {
          setMessage('Erro: Tente novamente mais tarde!')
        }
      })
  }

  useEffect(() => {
    getPedidos()
  }, [])

  // chama funcao excluir Pedido 
  const deletePedido = async (idPedido) => {
    if (window.confirm('Tem certeza que deseja apagar?')) {
      const response = await servDelete('http://localhost:8080/pedidos/' + idPedido)
      setMessage(response)
      getPedidos(pagina)
    }
  }
  //console.log(pesquisa)

  //console.log(data)

  const selecionaDados = async (e) => {
    if (window.confirm('Tem certeza que deseja carregar o arquivo?')) {
      const reader = new FileReader()
      reader.readAsBinaryString(e.target.files[0])
      reader.onload = (e) => {
        const data = e.target.result
        const workbook = xlsx.read(data, { type: "binary" })
        const sheetName = workbook.SheetNames[0]
        const sheet = workbook.Sheets[sheetName]
        const parsedData = xlsx.utils.sheet_to_json(sheet)
        //setData(parsedData)
        //console.log(parsedData)
        importarDados(parsedData)

      }

    }
  }

  const importarDados = async (jsonPlanilha) => {
    const headers = {
      'headers': {
        'Content-Type': 'application/json'
      }
    }
    await axios.post('http://localhost:8080/pedidosplanilha', jsonPlanilha, headers)
    console.log("Testado")
    console.log(data.pedidos)
    getPedidos(pagina)
  }




  const exportarDados = async () => {
    const response = await axios.get("http://localhost:8080/pedidosTodos")
    console.log(response.data.pedidos)
    console.log('Exportação testada')
    const pedidoscompleto = response.data.pedidos
    const workSheet = xlsx.utils.json_to_sheet(pedidoscompleto)
    const workBook = xlsx.utils.book_new()
    xlsx.utils.book_append_sheet(workBook, workSheet, "pedidos")
    xlsx.write(workBook, { bookType: 'xlsx', type: "buffer" })
    xlsx.write(workBook, { bookType: "xlsx", type: "binary" })
    xlsx.writeFile(workBook, "pedidosExportados.xlsx")

  }


  return (
    <>
      <Head>
        <title>Monitora Envios</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Link href={"/cadastrarPedido"}><button type='button'>Cadastrar</button></Link>
        <h2>Listar Pedidos</h2>
        <label><strong>Importar:  </strong></label>
        <input type='file' accept='.xlsx' onChange={selecionaDados} />{"  "}{"  "}
        <label><strong>Exportar:  </strong></label>
        <button type='button' onClick={() => exportarDados()}>Salvar</button><br /><br />


        <label>Pesquisa:  </label>
        <input
          name='pesquisa'
          type='text'
          value={pesquisa}
          onChange={(ev) => setPesquisa(ev.target.value)}
        /> <br />



       


      </main>
    </>
  )
}
